import numpy as np


class TfConcept:
    """
    Represents a concept object with associated name and vector, based on the output of word2vec.

    This class forms the basis for creating objects that are mapped to concepts found in the metadata generated by word2vec, 
    containing both the name of the concept and its corresponding vector representation.

    Attributes
    ----------
        :param name: The name of a concept as found in word2vec metadata.
        :type name: str
        :param vector: The corresponding vector representation of the concept as output by word2vec.
        :type vector: numpy.ndarray
    
    """

    def __init__(self, name:str, vector:np.ndarray) -> None:
        """
        Initializes the TfConcept object with associated name and vector.
        
        """
        
        self._name = name
        if not isinstance(vector, np.ndarray):
            raise ValueError("The input vector needs to be a numpy array.")
        self._vector = vector
    
    @property
    def name(self) -> str:
        """
        Retrieves the name of the concept.
        
        :return: The name of the concept.
        :rtype: str
        """
        return self._name
    
    @property
    def vector(self) -> np.ndarray:
        """
        Retrieves the vector corresponding to the concept.
        
        :return: The vector corresponding to the concept.
        :rtype: np.ndarray
        """
        return self._vector
    
    def __str__(self) -> str:
        """
        Represents the TfConcept object as a string.
        
        :return: A string representation of the object, displaying the name of the concept and the dimension of its vector.
        :rtype: str
        """
        return f"{self._name} with vector of {len(self._vector)} dimensions"
